@page "/app/manage/doctors/report/{DoctorId}"
@using ClinicApp.Services.Visit
@using ClinicApp.Services.Schedule
@inherits OwningComponentBase<ClinicApp.Services.Visit.IVisitsReportService>
@inject IScheduleService ScheduleService

<div class="container text-center py-3">
    <h1 class="display-4">View report</h1>
    <NavLink Match="NavLinkMatch.All" href="/app/manage/doctors" class="btn btn-outline-secondary rounded-pill">Back</NavLink>

    <div class="text-start my-3">
        <label class="mb-2">Select date:</label>
        <div class="hstack text-start">
            <InputDate @bind-Value="SelectedDate" class="form-control me-2"></InputDate>
            <button class="btn btn-outline-primary rounded-pill" @onclick="UpdateDictionary">Select</button>
        </div>
    </div>

    @if (EntriesToVisitsCount.Any())
    {
        <table class="table table-borderless table-hover table-striped">
            <thead>
                <tr>
                    <th>No.</th>
                    <th>From</th>
                    <th>To</th>
                    <th>Visits count</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var i = 1;
                    foreach (var pair in EntriesToVisitsCount)
                    {
                        <tr>
                            <td>@i</td>
                            <td>@(new DateTime(pair.Key.Date, pair.Key.Begin))</td>
                            <td>@(new DateTime(pair.Key.Date, pair.Key.End))</td>
                            <td>@pair.Value</td>
                        </tr>

                        i++;
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="h4 text-muted">The selected doctor doesn't have any finished visits for the selected date.</p>
    }
</div>

@code {

    [Parameter]
    public string DoctorId { get; set; } = string.Empty;

    protected IVisitsReportService VisitsReportService => Service;

    protected DateOnly SelectedDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    protected Dictionary<ScheduleEntry, int> EntriesToVisitsCount { get; set; } = new();

    protected override async void OnInitialized()
    {
        await UpdateDictionary();
        StateHasChanged();
    }

    private async Task UpdateDictionary()
    {
        var entries = (await ScheduleService.GetEntriesByDoctor(DoctorId)).Where(e => e.Date == SelectedDate);
        EntriesToVisitsCount = entries
            .ToDictionary(entry => entry, VisitsReportService.GetVisitsCountForScheduleEntry);
    }
}
