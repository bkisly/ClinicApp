@page "/app/user/register"
@using ClinicApp.ViewModels
@using ClinicApp.Services.User
@using ClinicApp.Models.Users
@inherits OwningComponentBase<ClinicApp.Services.User.IRegistrationService>

<div class="container-sm text-center p-4">
    <h1 class="display-4">Register</h1>
    <p>Provide all the required data and register as a new patient.</p>

    <EditForm EditContext="_editContext" OnValidSubmit="@Register" OnInvalidSubmit="@ClearErrors" class="my-3">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-start text-danger"/>
        <div class="form-floating my-2">
            <InputText class="form-control" @bind-Value="RegistrationViewModel.UserName" placeholder="User name"/>
            <label>User name</label>
        </div>
        <div class="form-floating my-2">
            <InputText class="form-control" @bind-Value="RegistrationViewModel.FirstName" placeholder="First name"/>
            <label>First name</label>
        </div>
        <div class="form-floating my-2">
            <InputText class="form-control" @bind-Value="RegistrationViewModel.LastName" placeholder="Last name"/>
            <label>Last name</label>
        </div>
        <div class="form-floating my-2">
            <InputText class="form-control" @bind-Value="RegistrationViewModel.Password" type="password" placeholder="Password"/>
            <label>Password</label>
        </div>
        <div class="form-floating my-2">
            <InputText class="form-control" @bind-Value="RegistrationViewModel.ConfirmPassword" type="password" placeholder="Confirm password"/>
            <label>Confirm password</label>
        </div>

        <button type="submit" class="btn btn-outline-primary btn-lg rounded-pill">Register</button>
    </EditForm>
</div>

@code {
    protected IRegistrationService RegistrationService => Service;
    protected RegistrationViewModel RegistrationViewModel { get; set; } = new();
    [Inject] protected NavigationManager? NavigationManager { get; set; }

    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(RegistrationViewModel);
        _messageStore = new ValidationMessageStore(_editContext);
    }

    protected void ClearErrors()
    {
        _messageStore?.Clear();
        Register();
    }

    protected async void Register()
    {
        if (RegistrationViewModel.Password != RegistrationViewModel.ConfirmPassword)
        {
            _messageStore?.Add(() => RegistrationViewModel, "Passwords do not match.");
        }
        else
        {
            var result = await RegistrationService.RegisterAsync(new Patient
            {
                UserName = RegistrationViewModel.UserName,
                FirstName = RegistrationViewModel.FirstName,
                LastName = RegistrationViewModel.LastName
            }, RegistrationViewModel.Password);

            if (result.Succeeded)
            {
                NavigationManager?.NavigateTo("/app");
                return;
            }

            foreach (var identityError in result.Errors)
                _messageStore?.Add(() => RegistrationViewModel, identityError.Description);
        }

        _editContext?.NotifyValidationStateChanged();
    }
}
